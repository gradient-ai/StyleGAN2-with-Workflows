# StyleGAN2 Workflow 2 of 2: Train and evaluate model
#
# This is the YAML file used to run the Gradient modeling Workflow for the sample project based on StyleGAN2 at
# https://docs.paperspace.com/gradient/get-started/tutorials-list/workflows-sample-project .
#
# See that URL for details on how to run the project.
#
# We assume the reader is familiar with the basics of workflows, and here wishes to use them for real projects.
#
# Workflow steps
#
# 1. Clone StyleGAN repo into managed storage provider dataset
# 2. Get pretrained cat model
# 3. Run evaluation on pretrained cat model
# 4. Show generating images using pretrained cat model
# 5. Train our model on image subsample
# 6. Run evaluation on our trained model
# 7. Show generating images with our trained model
#
# Dataset IDs
#
# The user needs to create their own Gradient managed datasets for job outputs to replace the IDs this file contains:
#
# getPretrainedModel            -> "dst4o4ovffbl4pc"
# evaluatePretrainedModel       -> "dsrc312ot0dejrz"
# generateImagesPretrainedModel -> "dst6xjunubzjvue"
# trainOurModel                 -> "dsr8vus0yf6i1hv"
# evaluateOurModel              -> "dstku0yhpuwn0l3"
# generateImagesOurModel        -> "dsr6qhqm56uf3cs"
#
# The ID for the Gradient managed dataset should correspond to the ID and version output from running the first workflow
# of the pair in this project (stylegan2-download-and-extract-data.yaml)
#
# We create different datasets for the output from each job because jobs can run in parallel and if their outputs were
# put into the same dataset it would create clashing versions.
#
# Last updated: Aug 06th 2021

jobs:

  # 1. Clone StyleGAN repo into managed storage provider dataset

  cloneStyleGAN2Repo:
    resources:
      instance-type: C5
    outputs:
      repo:
        type: volume
    uses: git-checkout@v1
    with:
      url: https://github.com/NVlabs/stylegan2.git

  # 2. Get pretrained cat model

  # The model .pkl is large so is not in the main StyleGAN2 repo
  # We copy the .pkl in this step, then refer to the copy via getPretrainedModel.outputs.pretrainedNetwork
  # below to avoid copying it again in the next steps

  getPretrainedModel:
    resources:
      instance-type: C5
    outputs:
      pretrainedNetwork:
        type: dataset
        with:
          ref: "dst4o4ovffbl4pc"
    uses: container@v1
    with:
      args:
        - wget
        - https://nvlabs-fi-cdn.nvidia.com/stylegan2/networks/stylegan2-cat-config-f.pkl
        - -P
        - /outputs/pretrainedNetwork
      image: alpine:latest

  # 3. Run evaluation on pretrained cat model

  # The temporary workaround using gzip/split/cat/gunzip is visible here and in steps 5-7
  # dsrlrvzgqhtcy7o:... refers to the specific dataset version that we want here
  # (Also available are no version (latest), v1 (etc.), :latest, or :<dataset-tag>)

  evaluatePretrainedModel:
    resources:
      instance-type: P6000 #V100
    needs:
      - cloneStyleGAN2Repo
      - getPretrainedModel
    inputs:
      repo: cloneStyleGAN2Repo.outputs.repo
      extractedImagesForTraining:
        type: dataset
        with:
          ref: "dsrlrvzgqhtcy7o:..."
      pretrainedNetwork: getPretrainedModel.outputs.pretrainedNetwork
    outputs:
      evaluationPretrained:
        type: dataset
        with:
          ref: "dsrc312ot0dejrz"
    uses: script@v1
    with:
      script: |-
        pip install scipy==1.3.3
        pip install requests==2.22.0
        pip install Pillow==6.2.1
        cp -R /inputs/repo /stylegan2
        cp -R /inputs/extractedImagesForTraining/cat_images_tfrecords /stylegan2
        cd /stylegan2/cat_images_tfrecords/cat
        for res in 2 3 4 5 6 7 8; do \
          cat cat_images_tfrecords-r0${res}_* > cat_images_tfrecords-r0$res.tfrecords.gz; \
          gunzip cat_images_tfrecords-r0$res.tfrecords.gz; \
        done
        cd /stylegan2
        python run_metrics.py \
          --data-dir=/stylegan2/cat_images_tfrecords \
          --network=/inputs/pretrainedNetwork/stylegan2-cat-config-f.pkl \
          --metrics=fid50k,ppl2_wend \
          --dataset=cat \
          --result-dir=/outputs/evaluationPretrained
        ls "-aFlR" /outputs
      image: tensorflow/tensorflow:1.14.0-gpu-py3

  # 4. Show generating images using pretrained cat model

  generateImagesPretrainedModel:
    resources:
      instance-type: P4000
    needs:
      - cloneStyleGAN2Repo
      - getPretrainedModel
    inputs:
      repo: cloneStyleGAN2Repo.outputs.repo
      pretrainedNetwork: getPretrainedModel.outputs.pretrainedNetwork
    outputs:
      generatedCatsPretrained:
        type: dataset
        with:
          ref: "dst6xjunubzjvue"
    uses: script@v1
    with:
      script: |-
        pip install scipy==1.3.3
        pip install requests==2.22.0
        pip install Pillow==6.2.1
        cp -R /inputs/repo /stylegan2
        cd /stylegan2
        python run_generator.py generate-images \
          --network=/inputs/pretrainedNetwork/stylegan2-cat-config-f.pkl \
          --seeds=6600-6605 \
          --truncation-psi=0.5 \
          --result-dir=/outputs/generatedCatsPretrained
        ls "-aFlR" /outputs
      image: tensorflow/tensorflow:1.14.0-gpu-py3

  # 5. Train our model on image subsample

  # This could be extended to a larger image set by passing it in instead of dsrlrvzgqhtcy7o:...

  trainOurModel:
    resources:
      instance-type: P6000 #V100
    needs:
      - cloneStyleGAN2Repo
    inputs:
      extractedImagesForTraining:
        type: dataset
        with:
          ref: "dsrlrvzgqhtcy7o:..."
      repo: cloneStyleGAN2Repo.outputs.repo
    outputs:
      ourTrainedNetwork:
        type: dataset
        with:
          ref: "dsr8vus0yf6i1hv"
    uses: script@v1
    with:
      script: |-
        pip install scipy==1.3.3
        pip install requests==2.22.0
        pip install Pillow==6.2.1
        cp -R /inputs/repo /stylegan2
        cp -R /inputs/extractedImagesForTraining/cat_images_tfrecords /stylegan2
        cd /stylegan2/cat_images_tfrecords/cat
        for res in 2 3 4 5 6 7 8; do \
          cat cat_images_tfrecords-r0${res}_* > cat_images_tfrecords-r0$res.tfrecords.gz; \
          gunzip cat_images_tfrecords-r0$res.tfrecords.gz; \
        done
        cd /stylegan2
        python run_training.py \
          --data-dir=/stylegan2/cat_images_tfrecords \
          --config=config-f \
          --dataset=cat \
          --total-kimg=10 \
          --result-dir=/outputs/ourTrainedNetwork
        cd /outputs/ourTrainedNetwork/00000-stylegan2-cat-1gpu-config-f
        gzip network-final.pkl
        split -a 3 -b 100m network-final.pkl.gz network-final_
        rm network-final.pkl.gz network-snapshot-*
        ls "-aFlR" /outputs
      image: tensorflow/tensorflow:1.14.0-gpu-py3

  # 6. Run evaluation on our trained model

  # Note here we are evaluating on the same images as used for training
  # Since our model was only trained on a small subset it doesn't matter here

  evaluateOurModel:
    resources:
      instance-type: P6000 #V100
    needs:
      - cloneStyleGAN2Repo
      - trainOurModel
    inputs:
      repo: cloneStyleGAN2Repo.outputs.repo
      extractedImagesForTraining:
        type: dataset
        with:
          ref: "dsrlrvzgqhtcy7o:..."
      ourTrainedNetwork: trainOurModel.outputs.ourTrainedNetwork
    outputs:
      evaluationOurs:
        type: dataset
        with:
          ref: "dstku0yhpuwn0l3"
    uses: script@v1
    with:
      script: |-
        pip install scipy==1.3.3
        pip install requests==2.22.0
        pip install Pillow==6.2.1
        cp -R /inputs/repo /stylegan2
        cp -R /inputs/extractedImagesForTraining/cat_images_tfrecords /stylegan2
        cd /stylegan2/cat_images_tfrecords/cat
        for res in 2 3 4 5 6 7 8; do \
          cat cat_images_tfrecords-r0${res}_* > cat_images_tfrecords-r0$res.tfrecords.gz; \
          gunzip cat_images_tfrecords-r0$res.tfrecords.gz; \
        done
        mkdir /ourTrainedNetwork
        cd /ourTrainedNetwork
        cat /inputs/ourTrainedNetwork/00000-stylegan2-cat-1gpu-config-f/network-final_* > network-final.pkl.gz
        gunzip network-final.pkl.gz
        cd /stylegan2
        python run_metrics.py \
          --data-dir=/stylegan2/cat_images_tfrecords \
          --network=/ourTrainedNetwork/network-final.pkl \
          --metrics=fid50k,ppl2_wend \
          --dataset=cat \
          --result-dir=/outputs/evaluationOurs
        ls "-aFlR" /outputs
      image: tensorflow/tensorflow:1.14.0-gpu-py3

  # 7. Show generating images with our trained model

  generateImagesOurModel:
    resources:
      instance-type: P4000
    needs:
      - cloneStyleGAN2Repo
      - trainOurModel
    inputs:
      repo: cloneStyleGAN2Repo.outputs.repo
      ourTrainedNetwork: trainOurModel.outputs.ourTrainedNetwork
    outputs:
      generatedCatsOurs:
        type: dataset
        with:
          ref: "dsr6qhqm56uf3cs"
    uses: script@v1
    with:
      script: |-
        pip install scipy==1.3.3
        pip install requests==2.22.0
        pip install Pillow==6.2.1
        cp -R /inputs/repo /stylegan2
        mkdir /ourTrainedNetwork
        cd /ourTrainedNetwork
        cat /inputs/ourTrainedNetwork/00000-stylegan2-cat-1gpu-config-f/network-final_* > network-final.pkl.gz
        gunzip network-final.pkl.gz
        cd /stylegan2
        python run_generator.py generate-images \
          --network=/ourTrainedNetwork/network-final.pkl \
          --seeds=6600-6605 \
          --truncation-psi=0.5 \
          --result-dir=/outputs/generatedCatsOurs
        ls "-aFlR" /outputs
      image: tensorflow/tensorflow:1.14.0-gpu-py3
